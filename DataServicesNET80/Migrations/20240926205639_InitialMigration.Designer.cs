// <auto-generated />
using System;
using DataServicesNET80;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataServicesNET80.Migrations
{
    [DbContext(typeof(Time4PartsContext))]
    [Migration("20240926205639_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DataServicesNET80.Models.amazonmarketplace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("locationID")
                        .HasColumnType("int(11)");

                    b.Property<int>("marketID")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "locationID" }, "idx_locationID");

                    b.HasIndex(new[] { "marketID" }, "idx_marketID");

                    b.ToTable("amazonmarketplace", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.asinsku", b =>
                {
                    b.Property<int>("asinskuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("asinskuID"));

                    b.Property<string>("asin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("locationID")
                        .HasColumnType("int(11)");

                    b.Property<string>("sku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("asinskuID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "asin", "sku" }, "UQ_AsinSku_asin_sku")
                        .IsUnique();

                    b.HasIndex(new[] { "locationID" }, "idx_locationID")
                        .HasDatabaseName("idx_locationID1");

                    b.ToTable("asinsku", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.billaddr", b =>
                {
                    b.Property<int>("billaddrID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("billaddrID"));

                    b.Property<string>("AddressAsAString")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("CountrySubDivisionCode")
                        .HasColumnType("text");

                    b.Property<string>("Line1")
                        .HasColumnType("text");

                    b.Property<string>("Line2")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("billaddrID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CountryCode" }, "IX_BillAddr_CountryCode");

                    b.ToTable("billaddr", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.bodiesgrouped", b =>
                {
                    b.Property<int>("bodiesGroupedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("bodiesGroupedID"));

                    b.Property<int>("group4bodiesID")
                        .HasColumnType("int(11)");

                    b.Property<int>("itemBodyID")
                        .HasColumnType("int(11)");

                    b.HasKey("bodiesGroupedID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "group4bodiesID" }, "FK_bodiesGrouped_group4bodies");

                    b.HasIndex(new[] { "itemBodyID" }, "FK_bodiesGrouped_itemBody");

                    b.ToTable("bodiesgrouped", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.bodyinthebox", b =>
                {
                    b.Property<int>("BodyInTheBoxID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BodyInTheBoxID"));

                    b.Property<int>("MultiDrawerID")
                        .HasColumnType("int(11)");

                    b.Property<int>("column")
                        .HasColumnType("int(11)");

                    b.Property<int>("itembodyID")
                        .HasColumnType("int(11)");

                    b.Property<int>("row")
                        .HasColumnType("int(11)");

                    b.HasKey("BodyInTheBoxID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MultiDrawerID" }, "fk_MultiDrawerID_idx");

                    b.HasIndex(new[] { "itembodyID" }, "fk_itembodyID_idx");

                    b.ToTable("bodyinthebox", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.brand", b =>
                {
                    b.Property<int>("brandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("brandID"));

                    b.Property<string>("name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("brandID")
                        .HasName("PRIMARY");

                    b.ToTable("brands");
                });

            modelBuilder.Entity("DataServicesNET80.Models.casioinvoice", b =>
                {
                    b.Property<int>("CasioInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CasioInvoiceId"));

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime");

                    b.Property<string>("mpn")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<decimal?>("price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("quantity")
                        .HasColumnType("int(11)");

                    b.HasKey("CasioInvoiceId")
                        .HasName("PRIMARY");

                    b.ToTable("casioinvoice", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.casioukbackorder", b =>
                {
                    b.Property<int>("casioUKbackorderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("casioUKbackorderId"));

                    b.Property<string>("mpn")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<DateTime>("orderedon")
                        .HasColumnType("datetime");

                    b.Property<int>("quantity")
                        .HasColumnType("int(11)");

                    b.HasKey("casioUKbackorderId")
                        .HasName("PRIMARY");

                    b.ToTable("casioukbackorder", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.casioukcurrentorder", b =>
                {
                    b.Property<int>("casioUKcurrentOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("casioUKcurrentOrderId"));

                    b.Property<string>("mpn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("char(20)")
                        .IsFixedLength();

                    b.Property<int>("quantity")
                        .HasColumnType("int(11)");

                    b.HasKey("casioUKcurrentOrderId")
                        .HasName("PRIMARY");

                    b.ToTable("casioukcurrentorder", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.colourtranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("col1")
                        .HasColumnType("int(11)");

                    b.Property<int?>("col2")
                        .HasColumnType("int(11)");

                    b.Property<int?>("col3")
                        .HasColumnType("int(11)");

                    b.Property<int?>("col4")
                        .HasColumnType("int(11)");

                    b.Property<int>("kodKoloru")
                        .HasColumnType("int(11)");

                    b.Property<string>("schemat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "kodKoloru" }, "FK_ColourTranslation_kodKoloru");

                    b.ToTable("colourtranslation", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.completeview", b =>
                {
                    b.Property<string>("AddressAsAString")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("CountrySubDivisionCode")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("GivenName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<int?>("ItemWeight")
                        .HasColumnType("int(11)");

                    b.Property<string>("Line1")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("Line2")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("OrderItemTypeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<bool>("VAT")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("VATRateID")
                        .HasColumnType("int(11)");

                    b.Property<string>("acquiredcurrency")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<int?>("billaddrID")
                        .HasColumnType("int(11)");

                    b.Property<int>("customerID")
                        .HasColumnType("int(11)");

                    b.Property<string>("customer_currency")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("customer_notes")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<DateTime>("dispatchedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("itemName")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<int?>("itembodyID")
                        .HasColumnType("int(11)");

                    b.Property<int?>("itmMarketAssID")
                        .HasColumnType("int(11)");

                    b.Property<int>("locationID")
                        .HasColumnType("int(11)");

                    b.Property<int>("market")
                        .HasColumnType("int(11)");

                    b.Property<int>("orderID")
                        .HasColumnType("int(11)");

                    b.Property<string>("order_notes")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<DateTime>("paidOn")
                        .HasColumnType("datetime");

                    b.Property<decimal>("postagePrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("postageType")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<decimal?>("price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("quantity")
                        .HasColumnType("int(11)");

                    b.Property<bool>("quickbooked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("salecurrency")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<decimal>("saletotal")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("tracking")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<decimal>("xchgrate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.ToTable((string)null);

                    b.ToView("completeview", (string)null);
                });

            modelBuilder.Entity("DataServicesNET80.Models.country2rmass", b =>
                {
                    b.Property<int>("Country2RMAssId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Country2RMAssId"));

                    b.Property<int>("RMZoneID")
                        .HasColumnType("int(11)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.HasKey("Country2RMAssId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "code" }, "uq_code")
                        .IsUnique();

                    b.ToTable("country2rmass", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.countrycode", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("code")
                        .HasName("PRIMARY");

                    b.ToTable("countrycode", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.countryvatrrate", b =>
                {
                    b.Property<int>("Countryvatrateid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Countryvatrateid"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<decimal>("rate")
                        .HasPrecision(18)
                        .HasColumnType("decimal(18)");

                    b.HasKey("Countryvatrateid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "code" }, "FK_VatRrate_CountryCode");

                    b.ToTable("countryvatrrate", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.currency", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("code")
                        .HasName("PRIMARY");

                    b.ToTable("currency", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.customer", b =>
                {
                    b.Property<int>("customerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("customerID"));

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("GivenName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("billaddrID")
                        .HasColumnType("int(11)");

                    b.Property<string>("currency")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("customer_notes")
                        .HasColumnType("text");

                    b.HasKey("customerID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "currency" }, "FK_Customer_Currency");

                    b.HasIndex(new[] { "billaddrID" }, "IX_Customer_BillAddrID");

                    b.ToTable("customer", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.deliveryprice", b =>
                {
                    b.Property<int>("DeliveryPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DeliveryPriceId"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("char(4)")
                        .IsFixedLength();

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DeliveryPriceId")
                        .HasName("PRIMARY");

                    b.ToTable("deliveryprice", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.group4body", b =>
                {
                    b.Property<int>("group4bodiesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("group4bodiesID"));

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("group4bodiesID")
                        .HasName("PRIMARY");

                    b.ToTable("group4bodies");

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.group4watch", b =>
                {
                    b.Property<int>("group4watchesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("group4watchesID"));

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("group4watchesID")
                        .HasName("PRIMARY");

                    b.ToTable("group4watches");

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.invoicetxn", b =>
                {
                    b.Property<int>("invoiceTXNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("invoiceTXNID"));

                    b.Property<int>("marketID")
                        .HasColumnType("int(11)");

                    b.Property<int>("orderID")
                        .HasColumnType("int(11)");

                    b.Property<int>("platformID")
                        .HasColumnType("int(11)");

                    b.Property<string>("platformTXN")
                        .HasColumnType("text");

                    b.Property<string>("qbInvoiceId")
                        .HasColumnType("text");

                    b.HasKey("invoiceTXNID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "marketID" }, "FK_invoiceTXNs_market");

                    b.HasIndex(new[] { "orderID" }, "FK_invoiceTXNs_order");

                    b.HasIndex(new[] { "platformID" }, "FK_invoiceTXNs_platforms");

                    b.ToTable("invoicetxns");

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.itembody", b =>
                {
                    b.Property<int>("itembodyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("itembodyID"));

                    b.Property<int>("brandID")
                        .HasColumnType("int(11)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("fullsearchterm")
                        .HasColumnType("text");

                    b.Property<string>("logoPic")
                        .HasColumnType("text");

                    b.Property<string>("mpn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("myname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("packagePic")
                        .HasColumnType("text");

                    b.Property<bool>("readyTotrack")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("typeId")
                        .HasColumnType("int(11)");

                    b.Property<bool>("visible")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("weight")
                        .HasColumnType("int(11)");

                    b.HasKey("itembodyID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "brandID" }, "FK_itemBody_brandID");

                    b.HasIndex(new[] { "typeId" }, "FK_itemBody_type");

                    b.ToTable("itembody", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.itemheader", b =>
                {
                    b.Property<int>("itemheaderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("itemheaderID"));

                    b.Property<int>("VATRateID")
                        .HasColumnType("int(11)");

                    b.Property<string>("acquiredcurrency")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<int>("itembodyID")
                        .HasColumnType("int(11)");

                    b.Property<int>("locationID")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("pricePaid")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("purchasecurrency")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime?>("purchasedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("quantity")
                        .HasColumnType("int(11)");

                    b.Property<int>("supplierID")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("xchgrate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("itemheaderID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "locationID" }, "FK_itemHeader_Location");

                    b.HasIndex(new[] { "itembodyID" }, "FK_itemHeader_itemBody");

                    b.HasIndex(new[] { "supplierID" }, "FK_itemHeader_suppliers");

                    b.HasIndex(new[] { "acquiredcurrency" }, "FK_itemheader2_currency");

                    b.HasIndex(new[] { "VATRateID" }, "FK_itemheader_VATRates");

                    b.HasIndex(new[] { "purchasecurrency" }, "FK_itemheader_currency");

                    b.ToTable("itemheader", null, t =>
                        {
                            t.HasTrigger("produktysklepowe");

                            t.HasTrigger("produktysklepowe2");
                        });

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.itemitsparametersandvalue", b =>
                {
                    b.Property<string>("ParameterName")
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<string>("ParameterValueName")
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<int>("itembodyID")
                        .HasColumnType("int(11)");

                    b.Property<int>("parameterID")
                        .HasColumnType("int(11)");

                    b.Property<int?>("parameterValueID")
                        .HasColumnType("int(11)");

                    b.Property<int?>("pos")
                        .HasColumnType("int(11)");

                    b.Property<int>("typeID")
                        .HasColumnType("int(11)");

                    b.ToTable((string)null);

                    b.ToView("itemitsparametersandvalues", (string)null);
                });

            modelBuilder.Entity("DataServicesNET80.Models.itmitmassociation", b =>
                {
                    b.Property<int>("itmitmassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("itmitmassID"));

                    b.Property<int>("sourceBody")
                        .HasColumnType("int(11)");

                    b.Property<int>("targetBody")
                        .HasColumnType("int(11)");

                    b.HasKey("itmitmassID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "sourceBody" }, "FK_itmitmAssociation_sourceBody");

                    b.HasIndex(new[] { "targetBody" }, "FK_itmitmAssociation_targetBody");

                    b.ToTable("itmitmassociation", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.itmmarketassoc", b =>
                {
                    b.Property<int>("itmmarketassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("itmmarketassID"));

                    b.Property<string>("SEName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("itemNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("itembodyID")
                        .HasColumnType("int(11)");

                    b.Property<int>("locationID")
                        .HasColumnType("int(11)");

                    b.Property<int>("marketID")
                        .HasColumnType("int(11)");

                    b.Property<int>("quantitySold")
                        .HasColumnType("int(11)");

                    b.Property<int?>("soldWith")
                        .HasColumnType("int(11)");

                    b.HasKey("itmmarketassID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "itembodyID" }, "FK_itmMarketAssoc_itembodyID");

                    b.HasIndex(new[] { "locationID" }, "FK_itmMarketAssoc_locationID");

                    b.HasIndex(new[] { "marketID" }, "FK_itmMarketAssoc_marketID");

                    b.HasIndex(new[] { "soldWith" }, "FK_itmMarketAssoc_soldWith");

                    b.ToTable("itmmarketassoc", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.itmparameter", b =>
                {
                    b.Property<int>("itmparameterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("itmparameterID"));

                    b.Property<int>("itembodyID")
                        .HasColumnType("int(11)");

                    b.Property<int>("parameterID")
                        .HasColumnType("int(11)");

                    b.Property<int>("parameterValueID")
                        .HasColumnType("int(11)");

                    b.HasKey("itmparameterID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "parameterValueID" }, "fk_cechavalueID_idx");

                    b.HasIndex(new[] { "itembodyID" }, "fk_itembodyID_idx")
                        .HasDatabaseName("fk_itembodyID_idx1");

                    b.HasIndex(new[] { "parameterID" }, "fk_parameterID_idx");

                    b.ToTable("itmparameters");

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.keyvalue", b =>
                {
                    b.Property<int>("keyvalueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("keyvalueID"));

                    b.Property<string>("key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("datetime");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("keyvalueID")
                        .HasName("PRIMARY");

                    b.ToTable("keyvalue", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.location", b =>
                {
                    b.Property<int>("locationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("locationID"));

                    b.Property<bool?>("active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("currency")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("locationID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "currency" }, "FK_Location_Currency");

                    b.ToTable("location", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.locmarassociation", b =>
                {
                    b.Property<int>("loc")
                        .HasColumnType("int(11)");

                    b.Property<int>("reference")
                        .HasColumnType("int(11)");

                    b.Property<int>("pos")
                        .HasColumnType("int(11)");

                    b.HasKey("loc", "reference")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "reference" }, "fk_locMarAssociation_market");

                    b.ToTable("locmarassociation", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.logentry", b =>
                {
                    b.Property<int>("logentryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("logentryId"));

                    b.Property<string>("_event")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("event");

                    b.Property<DateTime>("eventdate")
                        .HasColumnType("datetime");

                    b.HasKey("logentryId")
                        .HasName("PRIMARY");

                    b.ToTable("logentry", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.logevent", b =>
                {
                    b.Property<int>("logeventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("logeventID"));

                    b.Property<string>("_event")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event");

                    b.Property<DateTime>("happenedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("itemBodyID")
                        .HasColumnType("int(11)");

                    b.Property<int?>("itemHeaderID")
                        .HasColumnType("int(11)");

                    b.Property<int?>("marketID")
                        .HasColumnType("int(11)");

                    b.HasKey("logeventID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "itemBodyID" }, "FK_logevent_itemBody");

                    b.HasIndex(new[] { "itemHeaderID" }, "FK_logevent_itemHeader");

                    b.HasIndex(new[] { "marketID" }, "FK_logevent_market");

                    b.ToTable("logevent", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.market", b =>
                {
                    b.Property<int>("marketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("marketID"));

                    b.Property<bool>("IsInUse")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("marketID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "currency" }, "FK_market_Currency");

                    b.ToTable("market", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.marketplatformassociation", b =>
                {
                    b.Property<int>("MarketPlatformAssociationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MarketPlatformAssociationID"));

                    b.Property<int>("marketID")
                        .HasColumnType("int(11)");

                    b.Property<int>("platformID")
                        .HasColumnType("int(11)");

                    b.HasKey("MarketPlatformAssociationID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "marketID" }, "idx_marketID")
                        .HasDatabaseName("idx_marketID1");

                    b.HasIndex(new[] { "platformID" }, "idx_platformID");

                    b.ToTable("marketplatformassociation", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.mayalsofit", b =>
                {
                    b.Property<int>("mayalsofitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("mayalsofitID"));

                    b.Property<int>("group4bodiesID")
                        .HasColumnType("int(11)");

                    b.Property<int>("group4watchesID")
                        .HasColumnType("int(11)");

                    b.HasKey("mayalsofitID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "group4bodiesID" }, "FK_mayalsofit_group4bodies");

                    b.HasIndex(new[] { "group4watchesID" }, "FK_mayalsofit_group4watches");

                    b.ToTable("mayalsofit", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.multidrawer", b =>
                {
                    b.Property<int>("MultiDrawerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MultiDrawerID"));

                    b.Property<int>("columns")
                        .HasColumnType("int(11)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("rows")
                        .HasColumnType("int(11)");

                    b.HasKey("MultiDrawerID")
                        .HasName("PRIMARY");

                    b.ToTable("multidrawer", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.order", b =>
                {
                    b.Property<int>("orderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("orderID"));

                    b.Property<bool>("VAT")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("VATRateID")
                        .HasColumnType("int(11)");

                    b.Property<string>("acquiredcurrency")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<int>("customerID")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("dispatchedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("locationID")
                        .HasColumnType("int(11)");

                    b.Property<int>("market")
                        .HasColumnType("int(11)");

                    b.Property<string>("order_notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("paidOn")
                        .HasColumnType("datetime");

                    b.Property<decimal>("postagePrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("postageType")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("quickbooked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("salecurrency")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<decimal>("saletotal")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("tracking")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("xchgrate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("orderID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "acquiredcurrency" }, "FK_Order_Currency2");

                    b.HasIndex(new[] { "VATRateID" }, "FK_Order_VATRates");

                    b.HasIndex(new[] { "salecurrency" }, "FK_Order_currency");

                    b.HasIndex(new[] { "locationID" }, "FK_Order_locationID");

                    b.HasIndex(new[] { "market" }, "FK_Order_market");

                    b.HasIndex(new[] { "postageType" }, "FK_Order_postageType");

                    b.HasIndex(new[] { "status" }, "FK_Order_status");

                    b.HasIndex(new[] { "customerID" }, "IX_Order_CustomerID");

                    b.ToTable("order", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.orderitem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int?>("ItemWeight")
                        .HasColumnType("int(11)");

                    b.Property<int>("OrderItemTypeId")
                        .HasColumnType("int(11)");

                    b.Property<string>("itemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("itembodyID")
                        .HasColumnType("int(11)");

                    b.Property<int?>("itmMarketAssID")
                        .HasColumnType("int(11)");

                    b.Property<int?>("orderID")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("quantity")
                        .HasColumnType("int(11)");

                    b.HasKey("OrderItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "itembodyID" }, "fk_itemId_idx");

                    b.HasIndex(new[] { "OrderItemTypeId" }, "fk_itemType_idx");

                    b.HasIndex(new[] { "itmMarketAssID" }, "fk_itmMarketAssID_idx");

                    b.HasIndex(new[] { "orderID" }, "fk_orderID_idx");

                    b.ToTable("orderitem", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.orderitemtype", b =>
                {
                    b.Property<int>("OrderItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderItemTypeId"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrderItemTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("orderitemtype", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.orderstatus", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("code")
                        .HasName("PRIMARY");

                    b.ToTable("orderstatus", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.parameter", b =>
                {
                    b.Property<int>("parameterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("parameterID"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("parameterID")
                        .HasName("PRIMARY");

                    b.ToTable("parameters");

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.parameteranditsvalue", b =>
                {
                    b.Property<int>("parameterID")
                        .HasColumnType("int(11)");

                    b.Property<string>("parameterName")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.Property<int>("parameterValueID")
                        .HasColumnType("int(11)");

                    b.Property<int>("pos")
                        .HasColumnType("int(11)");

                    b.Property<string>("valueName")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    b.ToTable((string)null);

                    b.ToView("parameteranditsvalues", (string)null);
                });

            modelBuilder.Entity("DataServicesNET80.Models.parametervalue", b =>
                {
                    b.Property<int>("parameterValueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("parameterValueID"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("parameterID")
                        .HasColumnType("int(11)");

                    b.Property<int>("pos")
                        .HasColumnType("int(11)");

                    b.HasKey("parameterValueID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "parameterID" }, "fk_parameterID_idx")
                        .HasDatabaseName("fk_parameterID_idx1");

                    b.ToTable("parametervalues");

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.part2itemass", b =>
                {
                    b.Property<int>("part2itemassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("part2itemassID"));

                    b.Property<int>("itembodyID")
                        .HasColumnType("int(11)");

                    b.Property<int>("watchID")
                        .HasColumnType("int(11)");

                    b.Property<string>("watchsearchterm")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("part2itemassID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "itembodyID" }, "FK_part2itemass_itembody");

                    b.HasIndex(new[] { "watchID" }, "FK_part2itemass_watch");

                    b.ToTable("part2itemass", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.photo", b =>
                {
                    b.Property<int>("photoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("photoID"));

                    b.Property<int>("itembodyID")
                        .HasColumnType("int(11)");

                    b.Property<string>("path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("pos")
                        .HasColumnType("int(11)");

                    b.HasKey("photoID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "itembodyID" }, "fk_itembodyID_idx")
                        .HasDatabaseName("fk_itembodyID_idx2");

                    b.ToTable("photo", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.platform", b =>
                {
                    b.Property<int>("platformID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("platformID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("platformID")
                        .HasName("PRIMARY");

                    b.ToTable("platforms");

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.postagetype", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("code")
                        .HasName("PRIMARY");

                    b.ToTable("postagetypes");

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.rmzone", b =>
                {
                    b.Property<int>("RMZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RMZoneId"));

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("RMZoneId")
                        .HasName("PRIMARY");

                    b.ToTable("rmzones");

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.searchentry", b =>
                {
                    b.Property<int>("searchentryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("searchentryId"));

                    b.Property<string>("searchPhrase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("searchTimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("searchentryId")
                        .HasName("PRIMARY");

                    b.ToTable("searchentry", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.shopitem", b =>
                {
                    b.Property<int>("shopitemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("shopitemId"));

                    b.Property<bool>("active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("currencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<int>("itembodyID")
                        .HasColumnType("int(11)");

                    b.Property<int>("locationID")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("quantity")
                        .HasColumnType("int(11)");

                    b.Property<int?>("soldQuantity")
                        .HasColumnType("int(11)");

                    b.HasKey("shopitemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "currencyCode" }, "FK_shopitem_currencyCode");

                    b.HasIndex(new[] { "locationID" }, "FK_shopitem_locationID");

                    b.HasIndex(new[] { "itembodyID" }, "UK_shopitem_itembodyID")
                        .IsUnique();

                    b.ToTable("shopitem", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.stockshot", b =>
                {
                    b.Property<int>("StockShotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StockShotID"));

                    b.Property<int>("bodyid")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime");

                    b.Property<int>("locationID")
                        .HasColumnType("int(11)");

                    b.Property<int>("quantity")
                        .HasColumnType("int(11)");

                    b.HasKey("StockShotID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "bodyid" }, "FK_stockShot_bodyid");

                    b.HasIndex(new[] { "locationID" }, "FK_stockShot_location");

                    b.ToTable("stockshot", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.supplier", b =>
                {
                    b.Property<int>("supplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("supplierID"));

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("supplierID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "currency" }, "FK_Supplier_Currency");

                    b.ToTable("suppliers");

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.token", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)");

                    b.Property<string>("AmAccessKey")
                        .HasColumnType("text");

                    b.Property<string>("AmSecret")
                        .HasColumnType("text");

                    b.Property<string>("AmazonSPAPIClientID")
                        .HasColumnType("text");

                    b.Property<string>("AmazonSPAPIClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("AmazonSPAPIRefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("AmazonSPAPIToken")
                        .HasColumnType("text");

                    b.Property<string>("AppID")
                        .HasColumnType("text");

                    b.Property<string>("CertID")
                        .HasColumnType("text");

                    b.Property<string>("DevID")
                        .HasColumnType("text");

                    b.Property<string>("client_id")
                        .HasColumnType("text");

                    b.Property<string>("ebayOauthToken")
                        .HasColumnType("text");

                    b.Property<string>("ebayRefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("ebayToken")
                        .HasColumnType("text");

                    b.Property<int?>("locationID")
                        .HasColumnType("int(11)");

                    b.Property<string>("paypalToken")
                        .HasColumnType("text");

                    b.Property<string>("quickBooksAuthS")
                        .HasColumnType("text");

                    b.Property<string>("quickBooksRefresh")
                        .HasColumnType("text");

                    b.Property<string>("quickBooksToken")
                        .HasColumnType("text");

                    b.Property<string>("secret_id")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tokens");

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.type", b =>
                {
                    b.Property<int>("typeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("typeID"));

                    b.Property<string>("name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("typeID")
                        .HasName("PRIMARY");

                    b.ToTable("types");

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.typeparassociation", b =>
                {
                    b.Property<int>("typeID")
                        .HasColumnType("int(11)");

                    b.Property<int>("parameterID")
                        .HasColumnType("int(11)");

                    b.Property<int>("pos")
                        .HasColumnType("int(11)");

                    b.HasKey("typeID", "parameterID")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "parameterID" }, "FK_typeParAssociation_parameterID");

                    b.ToTable("typeparassociation", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.vatrate", b =>
                {
                    b.Property<int>("VATRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VATRateID"));

                    b.Property<decimal>("Rate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("VATDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("VATRateID")
                        .HasName("PRIMARY");

                    b.ToTable("vatrates");

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.watch", b =>
                {
                    b.Property<int>("watchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("watchID"));

                    b.Property<bool>("haspic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("searchterm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("watchCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("watchID")
                        .HasName("PRIMARY");

                    b.ToTable("watch", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.watchesgrouped", b =>
                {
                    b.Property<int>("watchesGroupedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("watchesGroupedID"));

                    b.Property<int>("group4watchesID")
                        .HasColumnType("int(11)");

                    b.Property<int>("watchID")
                        .HasColumnType("int(11)");

                    b.HasKey("watchesGroupedID")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "group4watchesID" }, "fk_watchesGrouped_group4watches");

                    b.HasIndex(new[] { "watchID" }, "fk_watchesGrouped_watch");

                    b.ToTable("watchesgrouped", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.xrate", b =>
                {
                    b.Property<int>("XrateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("XrateId"));

                    b.Property<string>("SourceCurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime");

                    b.Property<decimal>("rate")
                        .HasPrecision(18)
                        .HasColumnType("decimal(18)");

                    b.HasKey("XrateId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "code" }, "FK_Xrate_Currency");

                    b.HasIndex(new[] { "SourceCurrencyCode" }, "FK_Xrate_Currency2");

                    b.ToTable("xrate", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.zibiinvoice", b =>
                {
                    b.Property<int>("zibiinvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("zibiinvoiceId"));

                    b.Property<int>("discount")
                        .HasColumnType("int(11)");

                    b.Property<string>("mpn")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<decimal>("price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("priceAfterD")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("purchasedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("quantity")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("vat")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("zibiinvoiceId")
                        .HasName("PRIMARY");

                    b.ToTable("zibiinvoice", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("DataServicesNET80.Models.amazonmarketplace", b =>
                {
                    b.HasOne("DataServicesNET80.Models.location", "location")
                        .WithMany("amazonmarketplaces")
                        .HasForeignKey("locationID")
                        .IsRequired()
                        .HasConstraintName("FK_AmazonMarketplace_Location");

                    b.HasOne("DataServicesNET80.Models.market", "market")
                        .WithMany("amazonmarketplaces")
                        .HasForeignKey("marketID")
                        .IsRequired()
                        .HasConstraintName("FK_AmazonMarketplace_market");

                    b.Navigation("location");

                    b.Navigation("market");
                });

            modelBuilder.Entity("DataServicesNET80.Models.asinsku", b =>
                {
                    b.HasOne("DataServicesNET80.Models.location", "location")
                        .WithMany("asinskus")
                        .HasForeignKey("locationID")
                        .IsRequired()
                        .HasConstraintName("FK_AsinSku_Location");

                    b.Navigation("location");
                });

            modelBuilder.Entity("DataServicesNET80.Models.billaddr", b =>
                {
                    b.HasOne("DataServicesNET80.Models.countrycode", "CountryCodeNavigation")
                        .WithMany("billaddrs")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK_BillAddr_CountryCode");

                    b.Navigation("CountryCodeNavigation");
                });

            modelBuilder.Entity("DataServicesNET80.Models.bodiesgrouped", b =>
                {
                    b.HasOne("DataServicesNET80.Models.group4body", "group4bodies")
                        .WithMany("bodiesgroupeds")
                        .HasForeignKey("group4bodiesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_bodiesGrouped_group4bodies");

                    b.HasOne("DataServicesNET80.Models.itembody", "itemBody")
                        .WithMany("bodiesgroupeds")
                        .HasForeignKey("itemBodyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_bodiesGrouped_itemBody");

                    b.Navigation("group4bodies");

                    b.Navigation("itemBody");
                });

            modelBuilder.Entity("DataServicesNET80.Models.bodyinthebox", b =>
                {
                    b.HasOne("DataServicesNET80.Models.multidrawer", "MultiDrawer")
                        .WithMany("bodyintheboxes")
                        .HasForeignKey("MultiDrawerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_BodyInTheBox_MultiDrawer");

                    b.HasOne("DataServicesNET80.Models.itembody", "itembody")
                        .WithMany("bodyintheboxes")
                        .HasForeignKey("itembodyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_BodyInTheBox_itembody");

                    b.Navigation("MultiDrawer");

                    b.Navigation("itembody");
                });

            modelBuilder.Entity("DataServicesNET80.Models.colourtranslation", b =>
                {
                    b.HasOne("DataServicesNET80.Models.parametervalue", "kodKoloruNavigation")
                        .WithMany("colourtranslations")
                        .HasForeignKey("kodKoloru")
                        .IsRequired()
                        .HasConstraintName("FK_ColourTranslation_kodKoloru");

                    b.Navigation("kodKoloruNavigation");
                });

            modelBuilder.Entity("DataServicesNET80.Models.country2rmass", b =>
                {
                    b.HasOne("DataServicesNET80.Models.countrycode", "codeNavigation")
                        .WithOne("country2rmass")
                        .HasForeignKey("DataServicesNET80.Models.country2rmass", "code")
                        .IsRequired()
                        .HasConstraintName("FK_country2rmass_code");

                    b.Navigation("codeNavigation");
                });

            modelBuilder.Entity("DataServicesNET80.Models.countryvatrrate", b =>
                {
                    b.HasOne("DataServicesNET80.Models.countrycode", "codeNavigation")
                        .WithMany("countryvatrrates")
                        .HasForeignKey("code")
                        .IsRequired()
                        .HasConstraintName("FK_VatRrate_CountryCode");

                    b.Navigation("codeNavigation");
                });

            modelBuilder.Entity("DataServicesNET80.Models.customer", b =>
                {
                    b.HasOne("DataServicesNET80.Models.billaddr", "billaddr")
                        .WithMany("customers")
                        .HasForeignKey("billaddrID")
                        .HasConstraintName("FK_Customer_BillAddr");

                    b.HasOne("DataServicesNET80.Models.currency", "currencyNavigation")
                        .WithMany("customers")
                        .HasForeignKey("currency")
                        .HasConstraintName("FK_Customer_Currency");

                    b.Navigation("billaddr");

                    b.Navigation("currencyNavigation");
                });

            modelBuilder.Entity("DataServicesNET80.Models.invoicetxn", b =>
                {
                    b.HasOne("DataServicesNET80.Models.market", "market")
                        .WithMany("invoicetxns")
                        .HasForeignKey("marketID")
                        .IsRequired()
                        .HasConstraintName("FK_invoiceTXNs_market");

                    b.HasOne("DataServicesNET80.Models.order", "order")
                        .WithMany("invoicetxns")
                        .HasForeignKey("orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_invoiceTXNs_order");

                    b.HasOne("DataServicesNET80.Models.platform", "platform")
                        .WithMany("invoicetxns")
                        .HasForeignKey("platformID")
                        .IsRequired()
                        .HasConstraintName("FK_invoiceTXNs_platforms");

                    b.Navigation("market");

                    b.Navigation("order");

                    b.Navigation("platform");
                });

            modelBuilder.Entity("DataServicesNET80.Models.itembody", b =>
                {
                    b.HasOne("DataServicesNET80.Models.brand", "brand")
                        .WithMany("itembodies")
                        .HasForeignKey("brandID")
                        .IsRequired()
                        .HasConstraintName("FK_itemBody_brandID");

                    b.HasOne("DataServicesNET80.Models.type", "type")
                        .WithMany("itembodies")
                        .HasForeignKey("typeId")
                        .IsRequired()
                        .HasConstraintName("FK_itemBody_type");

                    b.Navigation("brand");

                    b.Navigation("type");
                });

            modelBuilder.Entity("DataServicesNET80.Models.itemheader", b =>
                {
                    b.HasOne("DataServicesNET80.Models.vatrate", "VATRate")
                        .WithMany("itemheaders")
                        .HasForeignKey("VATRateID")
                        .IsRequired()
                        .HasConstraintName("FK_itemheader_VATRates");

                    b.HasOne("DataServicesNET80.Models.currency", "acquiredcurrencyNavigation")
                        .WithMany("itemheaderacquiredcurrencyNavigations")
                        .HasForeignKey("acquiredcurrency")
                        .HasConstraintName("FK_itemheader2_currency");

                    b.HasOne("DataServicesNET80.Models.itembody", "itembody")
                        .WithMany("itemheaders")
                        .HasForeignKey("itembodyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_itemHeader_itemBody");

                    b.HasOne("DataServicesNET80.Models.location", "location")
                        .WithMany("itemheaders")
                        .HasForeignKey("locationID")
                        .IsRequired()
                        .HasConstraintName("FK_itemHeader_Location");

                    b.HasOne("DataServicesNET80.Models.currency", "purchasecurrencyNavigation")
                        .WithMany("itemheaderpurchasecurrencyNavigations")
                        .HasForeignKey("purchasecurrency")
                        .HasConstraintName("FK_itemheader_currency");

                    b.HasOne("DataServicesNET80.Models.supplier", "supplier")
                        .WithMany("itemheaders")
                        .HasForeignKey("supplierID")
                        .IsRequired()
                        .HasConstraintName("FK_itemHeader_suppliers");

                    b.Navigation("VATRate");

                    b.Navigation("acquiredcurrencyNavigation");

                    b.Navigation("itembody");

                    b.Navigation("location");

                    b.Navigation("purchasecurrencyNavigation");

                    b.Navigation("supplier");
                });

            modelBuilder.Entity("DataServicesNET80.Models.itmitmassociation", b =>
                {
                    b.HasOne("DataServicesNET80.Models.itembody", "sourceBodyNavigation")
                        .WithMany("itmitmassociationsourceBodyNavigations")
                        .HasForeignKey("sourceBody")
                        .IsRequired()
                        .HasConstraintName("FK_itmitmAssociation_sourceBody");

                    b.HasOne("DataServicesNET80.Models.itembody", "targetBodyNavigation")
                        .WithMany("itmitmassociationtargetBodyNavigations")
                        .HasForeignKey("targetBody")
                        .IsRequired()
                        .HasConstraintName("FK_itmitmAssociation_targetBody");

                    b.Navigation("sourceBodyNavigation");

                    b.Navigation("targetBodyNavigation");
                });

            modelBuilder.Entity("DataServicesNET80.Models.itmmarketassoc", b =>
                {
                    b.HasOne("DataServicesNET80.Models.itembody", "itembody")
                        .WithMany("itmmarketassocitembodies")
                        .HasForeignKey("itembodyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_itmMarketAssoc_itembodyID");

                    b.HasOne("DataServicesNET80.Models.location", "location")
                        .WithMany("itmmarketassocs")
                        .HasForeignKey("locationID")
                        .IsRequired()
                        .HasConstraintName("FK_itmMarketAssoc_locationID");

                    b.HasOne("DataServicesNET80.Models.market", "market")
                        .WithMany("itmmarketassocs")
                        .HasForeignKey("marketID")
                        .IsRequired()
                        .HasConstraintName("FK_itmMarketAssoc_marketID");

                    b.HasOne("DataServicesNET80.Models.itembody", "soldWithNavigation")
                        .WithMany("itmmarketassocsoldWithNavigations")
                        .HasForeignKey("soldWith")
                        .HasConstraintName("FK_itmMarketAssoc_soldWith");

                    b.Navigation("itembody");

                    b.Navigation("location");

                    b.Navigation("market");

                    b.Navigation("soldWithNavigation");
                });

            modelBuilder.Entity("DataServicesNET80.Models.itmparameter", b =>
                {
                    b.HasOne("DataServicesNET80.Models.itembody", "itembody")
                        .WithMany("itmparameters")
                        .HasForeignKey("itembodyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_itmParameters_itembody");

                    b.HasOne("DataServicesNET80.Models.parameter", "parameter")
                        .WithMany("itmparameters")
                        .HasForeignKey("parameterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_itmParameters_cechy");

                    b.HasOne("DataServicesNET80.Models.parametervalue", "parameterValue")
                        .WithMany("itmparameters")
                        .HasForeignKey("parameterValueID")
                        .IsRequired()
                        .HasConstraintName("fk_itmParameters_cechyValues");

                    b.Navigation("itembody");

                    b.Navigation("parameter");

                    b.Navigation("parameterValue");
                });

            modelBuilder.Entity("DataServicesNET80.Models.location", b =>
                {
                    b.HasOne("DataServicesNET80.Models.currency", "currencyNavigation")
                        .WithMany("locations")
                        .HasForeignKey("currency")
                        .HasConstraintName("FK_Location_Currency");

                    b.Navigation("currencyNavigation");
                });

            modelBuilder.Entity("DataServicesNET80.Models.locmarassociation", b =>
                {
                    b.HasOne("DataServicesNET80.Models.location", "locNavigation")
                        .WithMany("locmarassociations")
                        .HasForeignKey("loc")
                        .IsRequired()
                        .HasConstraintName("fk_locMarAssociation_location");

                    b.HasOne("DataServicesNET80.Models.market", "referenceNavigation")
                        .WithMany("locmarassociations")
                        .HasForeignKey("reference")
                        .IsRequired()
                        .HasConstraintName("fk_locMarAssociation_market");

                    b.Navigation("locNavigation");

                    b.Navigation("referenceNavigation");
                });

            modelBuilder.Entity("DataServicesNET80.Models.logevent", b =>
                {
                    b.HasOne("DataServicesNET80.Models.itembody", "itemBody")
                        .WithMany("logevents")
                        .HasForeignKey("itemBodyID")
                        .IsRequired()
                        .HasConstraintName("FK_logevent_itemBody");

                    b.HasOne("DataServicesNET80.Models.itemheader", "itemHeader")
                        .WithMany("logevents")
                        .HasForeignKey("itemHeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_logevent_itemHeader");

                    b.HasOne("DataServicesNET80.Models.market", "market")
                        .WithMany("logevents")
                        .HasForeignKey("marketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_logevent_market");

                    b.Navigation("itemBody");

                    b.Navigation("itemHeader");

                    b.Navigation("market");
                });

            modelBuilder.Entity("DataServicesNET80.Models.market", b =>
                {
                    b.HasOne("DataServicesNET80.Models.currency", "currencyNavigation")
                        .WithMany("markets")
                        .HasForeignKey("currency")
                        .IsRequired()
                        .HasConstraintName("FK_market_Currency");

                    b.Navigation("currencyNavigation");
                });

            modelBuilder.Entity("DataServicesNET80.Models.marketplatformassociation", b =>
                {
                    b.HasOne("DataServicesNET80.Models.market", "market")
                        .WithMany("marketplatformassociations")
                        .HasForeignKey("marketID")
                        .IsRequired()
                        .HasConstraintName("FK_MarketPlatformAssociation_market");

                    b.HasOne("DataServicesNET80.Models.platform", "platform")
                        .WithMany("marketplatformassociations")
                        .HasForeignKey("platformID")
                        .IsRequired()
                        .HasConstraintName("FK_MarketPlatformAssociation_platforms");

                    b.Navigation("market");

                    b.Navigation("platform");
                });

            modelBuilder.Entity("DataServicesNET80.Models.mayalsofit", b =>
                {
                    b.HasOne("DataServicesNET80.Models.group4body", "group4bodies")
                        .WithMany("mayalsofits")
                        .HasForeignKey("group4bodiesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_mayalsofit_group4bodies");

                    b.HasOne("DataServicesNET80.Models.group4watch", "group4watches")
                        .WithMany("mayalsofits")
                        .HasForeignKey("group4watchesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_mayalsofit_group4watches");

                    b.Navigation("group4bodies");

                    b.Navigation("group4watches");
                });

            modelBuilder.Entity("DataServicesNET80.Models.order", b =>
                {
                    b.HasOne("DataServicesNET80.Models.vatrate", "VATRate")
                        .WithMany("orders")
                        .HasForeignKey("VATRateID")
                        .IsRequired()
                        .HasConstraintName("FK_Order_VATRates");

                    b.HasOne("DataServicesNET80.Models.currency", "acquiredcurrencyNavigation")
                        .WithMany("orderacquiredcurrencyNavigations")
                        .HasForeignKey("acquiredcurrency")
                        .HasConstraintName("FK_Order_Currency2");

                    b.HasOne("DataServicesNET80.Models.customer", "customer")
                        .WithMany("orders")
                        .HasForeignKey("customerID")
                        .IsRequired()
                        .HasConstraintName("FK_Order_customerID");

                    b.HasOne("DataServicesNET80.Models.location", "location")
                        .WithMany("orders")
                        .HasForeignKey("locationID")
                        .IsRequired()
                        .HasConstraintName("FK_Order_locationID");

                    b.HasOne("DataServicesNET80.Models.market", "marketNavigation")
                        .WithMany("orders")
                        .HasForeignKey("market")
                        .IsRequired()
                        .HasConstraintName("FK_Order_market");

                    b.HasOne("DataServicesNET80.Models.postagetype", "postageTypeNavigation")
                        .WithMany("orders")
                        .HasForeignKey("postageType")
                        .HasConstraintName("FK_Order_postageType");

                    b.HasOne("DataServicesNET80.Models.currency", "salecurrencyNavigation")
                        .WithMany("ordersalecurrencyNavigations")
                        .HasForeignKey("salecurrency")
                        .HasConstraintName("FK_Order_currency");

                    b.HasOne("DataServicesNET80.Models.orderstatus", "statusNavigation")
                        .WithMany("orders")
                        .HasForeignKey("status")
                        .IsRequired()
                        .HasConstraintName("FK_Order_status");

                    b.Navigation("VATRate");

                    b.Navigation("acquiredcurrencyNavigation");

                    b.Navigation("customer");

                    b.Navigation("location");

                    b.Navigation("marketNavigation");

                    b.Navigation("postageTypeNavigation");

                    b.Navigation("salecurrencyNavigation");

                    b.Navigation("statusNavigation");
                });

            modelBuilder.Entity("DataServicesNET80.Models.orderitem", b =>
                {
                    b.HasOne("DataServicesNET80.Models.orderitemtype", "OrderItemType")
                        .WithMany("orderitems")
                        .HasForeignKey("OrderItemTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_OrderItem_OrderItemType");

                    b.HasOne("DataServicesNET80.Models.itembody", "itembody")
                        .WithMany("orderitems")
                        .HasForeignKey("itembodyID")
                        .IsRequired()
                        .HasConstraintName("fk_OrderItem_itemBody");

                    b.HasOne("DataServicesNET80.Models.itmmarketassoc", "itmMarketAss")
                        .WithMany("orderitems")
                        .HasForeignKey("itmMarketAssID")
                        .HasConstraintName("fk_OrderItem_itmMarketAssoc");

                    b.HasOne("DataServicesNET80.Models.order", "order")
                        .WithMany("orderitems")
                        .HasForeignKey("orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_OrderItem_Order");

                    b.Navigation("OrderItemType");

                    b.Navigation("itembody");

                    b.Navigation("itmMarketAss");

                    b.Navigation("order");
                });

            modelBuilder.Entity("DataServicesNET80.Models.parametervalue", b =>
                {
                    b.HasOne("DataServicesNET80.Models.parameter", "parameter")
                        .WithMany("parametervalues")
                        .HasForeignKey("parameterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_cechyValues_parameterID");

                    b.Navigation("parameter");
                });

            modelBuilder.Entity("DataServicesNET80.Models.part2itemass", b =>
                {
                    b.HasOne("DataServicesNET80.Models.itembody", "itembody")
                        .WithMany("part2itemasses")
                        .HasForeignKey("itembodyID")
                        .IsRequired()
                        .HasConstraintName("FK_part2itemass_itembody");

                    b.HasOne("DataServicesNET80.Models.watch", "watch")
                        .WithMany("part2itemasses")
                        .HasForeignKey("watchID")
                        .IsRequired()
                        .HasConstraintName("FK_part2itemass_watch");

                    b.Navigation("itembody");

                    b.Navigation("watch");
                });

            modelBuilder.Entity("DataServicesNET80.Models.photo", b =>
                {
                    b.HasOne("DataServicesNET80.Models.itembody", "itembody")
                        .WithMany("photos")
                        .HasForeignKey("itembodyID")
                        .IsRequired()
                        .HasConstraintName("fk_photo_itemBody");

                    b.Navigation("itembody");
                });

            modelBuilder.Entity("DataServicesNET80.Models.shopitem", b =>
                {
                    b.HasOne("DataServicesNET80.Models.currency", "currencyCodeNavigation")
                        .WithMany("shopitems")
                        .HasForeignKey("currencyCode")
                        .IsRequired()
                        .HasConstraintName("FK_shopitem_currencyCode");

                    b.HasOne("DataServicesNET80.Models.itembody", "itembody")
                        .WithOne("shopitem")
                        .HasForeignKey("DataServicesNET80.Models.shopitem", "itembodyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_shopitem_itembodyID");

                    b.HasOne("DataServicesNET80.Models.location", "location")
                        .WithMany("shopitems")
                        .HasForeignKey("locationID")
                        .IsRequired()
                        .HasConstraintName("FK_shopitem_locationID");

                    b.Navigation("currencyCodeNavigation");

                    b.Navigation("itembody");

                    b.Navigation("location");
                });

            modelBuilder.Entity("DataServicesNET80.Models.stockshot", b =>
                {
                    b.HasOne("DataServicesNET80.Models.itembody", "body")
                        .WithMany("stockshots")
                        .HasForeignKey("bodyid")
                        .IsRequired()
                        .HasConstraintName("FK_stockShot_bodyid");

                    b.HasOne("DataServicesNET80.Models.location", "location")
                        .WithMany("stockshots")
                        .HasForeignKey("locationID")
                        .IsRequired()
                        .HasConstraintName("FK_stockShot_location");

                    b.Navigation("body");

                    b.Navigation("location");
                });

            modelBuilder.Entity("DataServicesNET80.Models.supplier", b =>
                {
                    b.HasOne("DataServicesNET80.Models.currency", "currencyNavigation")
                        .WithMany("suppliers")
                        .HasForeignKey("currency")
                        .IsRequired()
                        .HasConstraintName("FK_Supplier_Currency");

                    b.Navigation("currencyNavigation");
                });

            modelBuilder.Entity("DataServicesNET80.Models.typeparassociation", b =>
                {
                    b.HasOne("DataServicesNET80.Models.parameter", "parameter")
                        .WithMany("typeparassociations")
                        .HasForeignKey("parameterID")
                        .IsRequired()
                        .HasConstraintName("FK_typeParAssociation_parameterID");

                    b.HasOne("DataServicesNET80.Models.type", "type")
                        .WithMany("typeparassociations")
                        .HasForeignKey("typeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_typeParAssociation_typeID");

                    b.Navigation("parameter");

                    b.Navigation("type");
                });

            modelBuilder.Entity("DataServicesNET80.Models.watchesgrouped", b =>
                {
                    b.HasOne("DataServicesNET80.Models.group4watch", "group4watches")
                        .WithMany("watchesgroupeds")
                        .HasForeignKey("group4watchesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_watchesGrouped_group4watches");

                    b.HasOne("DataServicesNET80.Models.watch", "watch")
                        .WithMany("watchesgroupeds")
                        .HasForeignKey("watchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_watchesGrouped_watch");

                    b.Navigation("group4watches");

                    b.Navigation("watch");
                });

            modelBuilder.Entity("DataServicesNET80.Models.xrate", b =>
                {
                    b.HasOne("DataServicesNET80.Models.currency", "SourceCurrencyCodeNavigation")
                        .WithMany("xrateSourceCurrencyCodeNavigations")
                        .HasForeignKey("SourceCurrencyCode")
                        .IsRequired()
                        .HasConstraintName("FK_Xrate_Currency2");

                    b.HasOne("DataServicesNET80.Models.currency", "codeNavigation")
                        .WithMany("xratecodeNavigations")
                        .HasForeignKey("code")
                        .IsRequired()
                        .HasConstraintName("FK_Xrate_Currency");

                    b.Navigation("SourceCurrencyCodeNavigation");

                    b.Navigation("codeNavigation");
                });

            modelBuilder.Entity("DataServicesNET80.Models.billaddr", b =>
                {
                    b.Navigation("customers");
                });

            modelBuilder.Entity("DataServicesNET80.Models.brand", b =>
                {
                    b.Navigation("itembodies");
                });

            modelBuilder.Entity("DataServicesNET80.Models.countrycode", b =>
                {
                    b.Navigation("billaddrs");

                    b.Navigation("country2rmass");

                    b.Navigation("countryvatrrates");
                });

            modelBuilder.Entity("DataServicesNET80.Models.currency", b =>
                {
                    b.Navigation("customers");

                    b.Navigation("itemheaderacquiredcurrencyNavigations");

                    b.Navigation("itemheaderpurchasecurrencyNavigations");

                    b.Navigation("locations");

                    b.Navigation("markets");

                    b.Navigation("orderacquiredcurrencyNavigations");

                    b.Navigation("ordersalecurrencyNavigations");

                    b.Navigation("shopitems");

                    b.Navigation("suppliers");

                    b.Navigation("xrateSourceCurrencyCodeNavigations");

                    b.Navigation("xratecodeNavigations");
                });

            modelBuilder.Entity("DataServicesNET80.Models.customer", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("DataServicesNET80.Models.group4body", b =>
                {
                    b.Navigation("bodiesgroupeds");

                    b.Navigation("mayalsofits");
                });

            modelBuilder.Entity("DataServicesNET80.Models.group4watch", b =>
                {
                    b.Navigation("mayalsofits");

                    b.Navigation("watchesgroupeds");
                });

            modelBuilder.Entity("DataServicesNET80.Models.itembody", b =>
                {
                    b.Navigation("bodiesgroupeds");

                    b.Navigation("bodyintheboxes");

                    b.Navigation("itemheaders");

                    b.Navigation("itmitmassociationsourceBodyNavigations");

                    b.Navigation("itmitmassociationtargetBodyNavigations");

                    b.Navigation("itmmarketassocitembodies");

                    b.Navigation("itmmarketassocsoldWithNavigations");

                    b.Navigation("itmparameters");

                    b.Navigation("logevents");

                    b.Navigation("orderitems");

                    b.Navigation("part2itemasses");

                    b.Navigation("photos");

                    b.Navigation("shopitem");

                    b.Navigation("stockshots");
                });

            modelBuilder.Entity("DataServicesNET80.Models.itemheader", b =>
                {
                    b.Navigation("logevents");
                });

            modelBuilder.Entity("DataServicesNET80.Models.itmmarketassoc", b =>
                {
                    b.Navigation("orderitems");
                });

            modelBuilder.Entity("DataServicesNET80.Models.location", b =>
                {
                    b.Navigation("amazonmarketplaces");

                    b.Navigation("asinskus");

                    b.Navigation("itemheaders");

                    b.Navigation("itmmarketassocs");

                    b.Navigation("locmarassociations");

                    b.Navigation("orders");

                    b.Navigation("shopitems");

                    b.Navigation("stockshots");
                });

            modelBuilder.Entity("DataServicesNET80.Models.market", b =>
                {
                    b.Navigation("amazonmarketplaces");

                    b.Navigation("invoicetxns");

                    b.Navigation("itmmarketassocs");

                    b.Navigation("locmarassociations");

                    b.Navigation("logevents");

                    b.Navigation("marketplatformassociations");

                    b.Navigation("orders");
                });

            modelBuilder.Entity("DataServicesNET80.Models.multidrawer", b =>
                {
                    b.Navigation("bodyintheboxes");
                });

            modelBuilder.Entity("DataServicesNET80.Models.order", b =>
                {
                    b.Navigation("invoicetxns");

                    b.Navigation("orderitems");
                });

            modelBuilder.Entity("DataServicesNET80.Models.orderitemtype", b =>
                {
                    b.Navigation("orderitems");
                });

            modelBuilder.Entity("DataServicesNET80.Models.orderstatus", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("DataServicesNET80.Models.parameter", b =>
                {
                    b.Navigation("itmparameters");

                    b.Navigation("parametervalues");

                    b.Navigation("typeparassociations");
                });

            modelBuilder.Entity("DataServicesNET80.Models.parametervalue", b =>
                {
                    b.Navigation("colourtranslations");

                    b.Navigation("itmparameters");
                });

            modelBuilder.Entity("DataServicesNET80.Models.platform", b =>
                {
                    b.Navigation("invoicetxns");

                    b.Navigation("marketplatformassociations");
                });

            modelBuilder.Entity("DataServicesNET80.Models.postagetype", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("DataServicesNET80.Models.supplier", b =>
                {
                    b.Navigation("itemheaders");
                });

            modelBuilder.Entity("DataServicesNET80.Models.type", b =>
                {
                    b.Navigation("itembodies");

                    b.Navigation("typeparassociations");
                });

            modelBuilder.Entity("DataServicesNET80.Models.vatrate", b =>
                {
                    b.Navigation("itemheaders");

                    b.Navigation("orders");
                });

            modelBuilder.Entity("DataServicesNET80.Models.watch", b =>
                {
                    b.Navigation("part2itemasses");

                    b.Navigation("watchesgroupeds");
                });
#pragma warning restore 612, 618
        }
    }
}
