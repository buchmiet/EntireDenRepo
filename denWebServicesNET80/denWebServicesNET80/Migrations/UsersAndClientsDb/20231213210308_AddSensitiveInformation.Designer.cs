// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using denWebServicesNET80.Models;

#nullable disable

namespace denWebServicesNET80.Migrations.UsersAndClientsDb
{
    [DbContext(typeof(UsersAndClientsDbContext))]
    [Migration("20231213210308_AddSensitiveInformation")]
    partial class AddSensitiveInformation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("denWebServicesNET80.Models.LoggedInClient", b =>
                {
                    b.Property<int>("LoggedInClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Handshake")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserClientNamesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoggedInClientId");

                    b.ToTable("LoggedInClients");
                });

            modelBuilder.Entity("denWebServicesNET80.Models.SensitiveInformation", b =>
                {
                    b.Property<int>("SensitiveInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DBHost")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DBPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DBPort")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DBUserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DBname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SensitiveInformationId");

                    b.ToTable("SensitiveInformations");
                });

            modelBuilder.Entity("denWebServicesNET80.Models.UserClientNames", b =>
                {
                    b.Property<int>("UserClientNamesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserClientNamesId");

                    b.HasIndex("UserId", "ClientName")
                        .IsUnique();

                    b.ToTable("UserClientNamess");
                });

            modelBuilder.Entity("denWebServicesNET80.Models.UserMaxClientsAssociation", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxClients")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("UserMaxClientsAssociations");
                });
#pragma warning restore 612, 618
        }
    }
}
