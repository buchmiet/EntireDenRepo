//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Trier {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DevComms {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DevComms() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Trier.DevComms", typeof(DevComms).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Answer object can be set as Pass/Fail only once.
        /// </summary>
        internal static string AnsweObjectCanBeSetAsPassFaiOnly_Once {
            get {
                return ResourceManager.GetString("AnsweObjectCanBeSetAsPassFaiOnly Once", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error {0} while {1}.
        /// </summary>
        internal static string errorWhile {
            get {
                return ResourceManager.GetString("errorWhile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} has already subscribed to add listeners to exceptions thrown. To keep the code clean and safe, there is no method to add more exceptions listeners to one subscriber. If this is difficult to execute in your architecture, help developing and add this method .
        /// </summary>
        internal static string HasAlreadySubscribedToAddListenersToExceptionsThrownToKeepTheCodeCleanAndSafeThereIsNoMethodToAddMoreExceptionsListenersToOneSubscriberIfThisIsDifficultToExecuteInYourArchitectureHelpDevelopingAndAddThisMethod {
            get {
                return ResourceManager.GetString("HasAlreadySubscribedToAddListenersToExceptionsThrownToKeepTheCodeCleanAndSafeTher" +
                        "eIsNoMethodToAddMoreExceptionsListenersToOneSubscriberIfThisIsDifficultToExecute" +
                        "InYourArchitectureHelpDevelopingAndAddThisMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Subscribing service to the list of exceptions that may be caught while executing actions.
        /// </summary>
        internal static string SubscribingServiceToTheListOfExceptionsThatMayBeCaughtWhileExecutingActions {
            get {
                return ResourceManager.GetString("SubscribingServiceToTheListOfExceptionsThatMayBeCaughtWhileExecutingActions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} was thrown with the following error message:{1}.
        /// </summary>
        internal static string WasThrownWithTheFollowingError {
            get {
                return ResourceManager.GetString("WasThrownWithTheFollowingError", resourceCulture);
            }
        }
    }
}
